package models;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import entities.Alumno;

public class AlumnoModel {
	private Connection connection;

	public AlumnoModel(Connection connection) {
		this.connection = connection;
	}

	public List<Alumno> listarAlumnos() {
		List<Alumno> alumnos = new ArrayList<>();

		try (Statement statement = connection.createStatement()) {
			String query = "SELECT * FROM alumno";
			ResultSet resultSet = statement.executeQuery(query);

			while (resultSet.next()) {
				String id = resultSet.getString("idAlumno");
				String nombre = resultSet.getString("nombre");
				String apellido = resultSet.getString("apellido");
				String direccion = resultSet.getString("direccion");
				String telefono = resultSet.getString("telefono");
				String email = resultSet.getString("email");

				Alumno alumno = new Alumno(id, nombre, apellido, direccion, telefono, email);
				alumnos.add(alumno);
			}
		} catch (SQLException e) {
			System.err.println("Error al listar los alumnos: " + e.getMessage());
		}

		return alumnos;
	}

	public void agregarAlumno(Alumno alumno) {
		try (PreparedStatement statement = connection.prepareStatement("INSERT INTO alumno (nombre, apellido, direccion, telefono, email) VALUES (?, ?, ?, ?, ?)")) {
			statement.setString(1, alumno.getNombre());
			statement.setString(2, alumno.getApellido());
			statement.setString(3, alumno.getDireccion());
			statement.setString(4, alumno.getTelefono());
			statement.setString(5, alumno.getEmail());

			statement.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Error al agregar el alumno: " + e.getMessage());
		}
	}

	public Alumno mostrarAlumno(int id) {
		Alumno alumno = null;

		try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM alumno WHERE id = ?")) {
			statement.setInt(1, id);
			ResultSet resultSet = statement.executeQuery();

			if (resultSet.next()) {
				String nombre = resultSet.getString("nombre");
				String apellido = resultSet.getString("apellido");
				String direccion = resultSet.getString("direccion");
				String telefono = resultSet.getString("telefono");
				String email = resultSet.getString("email");

				alumno = new Alumno(id, nombre, apellido, direccion, telefono, email);
			}
		} catch (SQLException e) {
			System.err.println("Error al mostrar el alumno: " + e.getMessage());
		}

		return alumno;
	}

	public void actualizarAlumno(Alumno alumno) {
		try (PreparedStatement statement = connection.prepareStatement(
				"UPDATE alumno SET nombre = ?, apellido = ?, direccion = ?, telefono = ?, email = ? WHERE id = ?")) {
			statement.setString(1, alumno.getNombre());
			statement.setString(2, alumno.getApellido());
			statement.setString(3, alumno.getDireccion());
			statement.setString(4, alumno.getTelefono());
			statement.setString(5, alumno.getEmail());
			statement.setInt(6, alumno.getId());

			statement.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Error al actualizar el alumno: " + e.getMessage());
		}
	}

	public void eliminarAlumno(int id) {
		try (PreparedStatement statement = connection.prepareStatement("DELETE FROM alumno WHERE id = ?")) {
			statement.setInt(1, id);
			statement.executeUpdate();
		} catch (SQLException e) {
			System.err.println("Error al eliminar el alumno: " + e.getMessage());
		}
	}

	public List<Alumno> buscarAlumno(String texto) {
		List<Alumno> alumnos = new ArrayList<>();

		try (PreparedStatement statement = connection
				.prepareStatement("SELECT * FROM alumno WHERE nombre LIKE ? OR apellido LIKE ? OR id = ?")) {
			statement.setString(1, "%" + texto + "%"); // Buscar por letras de nombre
			statement.setString(2, "%" + texto + "%"); // Buscar por letras de apellido
			try {
				int id = Integer.parseInt(texto);
				statement.setInt(3, id); // Buscar por ID de alumno
			} catch (NumberFormatException e) {
				statement.setInt(3, 0); // Valor predeterminado para ignorar la búsqueda por ID si no es un número
										// válido
			}

			ResultSet resultSet = statement.executeQuery();

			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String nombre = resultSet.getString("nombre");
				String apellido = resultSet.getString("apellido");
				String direccion = resultSet.getString("direccion");
				String telefono = resultSet.getString("telefono");
				String email = resultSet.getString("email");

				Alumno alumno = new Alumno(id, nombre, apellido, direccion, telefono, email);
				alumnos.add(alumno);
			}
		} catch (SQLException e) {
			System.err.println("Error al buscar el alumno: " + e.getMessage());
		}

		return alumnos;
	}
}
