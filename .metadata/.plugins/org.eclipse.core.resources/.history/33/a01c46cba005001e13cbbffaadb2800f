package models;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import entities.Libro;
import util.MySQLConexion;

public class LibroModel {
	
    /*private static final String DB_URL = "jdbc:mysql://localhost:3306/nombre_basedatos";
    private static final String DB_USER = "usuario";
    private static final String DB_PASSWORD = "contrase√±a";*/

    public static List<Libro> listarLibros() {
        List<Libro> libros = new ArrayList<>();

        try (Connection connection = MySQLConexion.getConexion()) {
            String sql =	"SELECT L.idLibro, L.titulo, L.autor, L.idEditorial, L.stock, L.estado, E.nombre " +
                    		"FROM Libro L INNER JOIN Editorial E ON L.idEditorial = E.idEditorial";

            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        String idLibro = resultSet.getString("idLibro");
                        String titulo = resultSet.getString("titulo");
                        String autor = resultSet.getString("autor");
                        String idEditorial = resultSet.getString("idEditorial");
                        int stock = resultSet.getInt("stock");
                        String estado = resultSet.getString("estado");
                        String editorial = resultSet.getString("nombre");

                        Libro libro = new Libro(idLibro, titulo, autor, idEditorial, stock, estado, editorial);
                        libros.add(libro);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return libros;
    }

    /*public static void agregarLibro(Libro libro) throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
        try {
        	connection = MySQLConexion.getConexion();
            String query = "INSERT INTO Libro (idLibro, titulo, autor, idEditorial, stock, estado) VALUES (?, ?, ?, ?, ?, ?)";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setString(1, libro.getIdLibro());
            preparedStatement.setString(2, libro.getTitulo());
            preparedStatement.setString(3, libro.getAutor());
            preparedStatement.setString(4, libro.getIdEditorial());
            preparedStatement.setInt(5, libro.getStock());
            preparedStatement.setString(6, libro.getEstado());

            preparedStatement.executeUpdate();
            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }*/
    public static void agregarLibro(Libro libro) throws Exception {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = MySQLConexion.getConexion();
            String query = "INSERT INTO Libro (idLibro, titulo, autor, idEditorial, stock, estado) VALUES (?, ?, ?, ?, ?, ?)";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setString(1, libro.getIdLibro());
            preparedStatement.setString(2, libro.getTitulo());
            preparedStatement.setString(3, libro.getAutor());
            preparedStatement.setString(4, libro.getIdEditorial());
            preparedStatement.setInt(5, libro.getStock());
            preparedStatement.setString(6, libro.getEstado());

            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new Exception("Error al agregar el libro: " + e.getMessage());
        } finally {
            // Cerrar los recursos en el orden inverso de su apertura
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static Libro mostrarLibro(String idLibro) {
        Libro libro = null;

        try (Connection connection = MySQLConexion.getConexion()) {
            String sql = 	"SELECT L.idLibro, L.titulo, L.autor, L.idEditorial, L.stock, L.estado, E.nombre " +
                    		"FROM Libro L INNER JOIN Editorial E ON L.idEditorial = E.idEditorial " +
                    		"WHERE L.idLibro = ?";

            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, idLibro);

                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        String titulo = resultSet.getString("titulo");
                        String autor = resultSet.getString("autor");
                        String idEditorial = resultSet.getString("idEditorial");
                        int stock = resultSet.getInt("stock");
                        String estado = resultSet.getString("estado");
                        String nombreEditorial = resultSet.getString("nombre");

                        libro = new Libro(idLibro, titulo, autor, idEditorial, stock, estado, nombreEditorial);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return libro;
    }

    public static void actualizarLibro(Libro libro) {
        try (Connection connection = MySQLConexion.getConexion()) {
            String sql = 	"UPDATE Libro SET titulo = ?, autor = ?, idEditorial = ?, stock = ?, estado = ? WHERE idLibro = ?";

            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, libro.getTitulo());
                statement.setString(2, libro.getAutor());
                statement.setString(3, libro.getIdEditorial());
                statement.setInt(4, libro.getStock());
                statement.setString(5, libro.getEstado());
                statement.setString(6, libro.getIdLibro());

                statement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void eliminarLibro(String idLibro) {
        try (Connection connection = MySQLConexion.getConexion()) {
            String sql = "DELETE FROM Libro WHERE idLibro = ?";

            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, idLibro);

                statement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
