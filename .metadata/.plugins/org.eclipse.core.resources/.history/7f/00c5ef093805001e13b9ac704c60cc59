package servlets;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import models.AlumnoModel;
import util.MySQLConexion;

import java.io.IOException;
import java.sql.Connection;
import java.util.List;

import entities.Alumno;

/**
 * Servlet implementation class AlumnoServlet
 */
public class AlumnoServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    private AlumnoModel alumnoModel;

    public void init() {
        // Obtener la conexión a la base de datos y crear una instancia de AlumnoModel
        // Esto dependerá de cómo tengas configurada tu conexión a la base de datos
        // Aquí se muestra un ejemplo básico
        Connection connection;
		try {
			connection = MySQLConexion.getConexion();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        alumnoModel = new AlumnoModel(connection);
    }
	
    public AlumnoServlet() {
        //super();
    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        if (action == null) {
            action = "listar"; // Acción predeterminada: listar alumnos
        }

        switch (action) {
            case "listar":
                listarAlumnos(request, response);
                break;
            case "mostrar":
                mostrarAlumno(request, response);
                break;
            case "agregar":
                agregarAlumno(request, response);
                break;
            case "actualizar":
                actualizarAlumno(request, response);
                break;
            case "eliminar":
                eliminarAlumno(request, response);
                break;
            case "buscar":
                buscarAlumno(request, response);
                break;
            default:
                listarAlumnos(request, response);
                break;
        }
	}

    private void listarAlumnos(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Alumno> alumnos = alumnoModel.listarAlumnos();

        request.setAttribute("alumnos", alumnos);
        request.getRequestDispatcher("listaAlumnos.jsp").forward(request, response);
    }

    private void mostrarAlumno(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String idAlumno = request.getParameter("id");

        Alumno alumno = alumnoModel.mostrarAlumno(idAlumno);

        request.setAttribute("alumno", alumno);
        request.getRequestDispatcher("mostrarAlumno.jsp").forward(request, response);
    }

    private void agregarAlumno(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String idAlumno = request.getParameter("id");
        String nombre = request.getParameter("nombre");
        String apellido = request.getParameter("apellido");
        String direccion = request.getParameter("direccion");
        String telefono = request.getParameter("telefono");
        String email = request.getParameter("email");

        Alumno alumno = new Alumno(idAlumno, nombre, apellido, direccion, telefono, email);
        alumnoModel.agregarAlumno(alumno);

        // Redireccionar a la página de listado de alumnos después de agregar uno
        response.sendRedirect("alumno?action=listar");
    }

    private void actualizarAlumno(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String idAlumno = request.getParameter("id");
        String nombre = request.getParameter("nombre");
        String apellido = request.getParameter("apellido");
        String direccion = request.getParameter("direccion");
        String telefono = request.getParameter("telefono");
        String email = request.getParameter("email");

        Alumno alumno = new Alumno(idAlumno, nombre, apellido, direccion, telefono, email);
        alumnoModel.actualizarAlumno(alumno);

        // Redireccionar a la página de listado de alumnos después de actualizar uno
        response.sendRedirect("alumno?action=listar");
    }

    private void eliminarAlumno(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String idAlumno = request.getParameter("id");

        alumnoModel.eliminarAlumno(idAlumno);

        // Redireccionar a la página de listado de alumnos después de eliminar uno
        response.sendRedirect("alumno?action=listar");
    }

    private void buscarAlumno(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String criterio = request.getParameter("criterio");

        List<Alumno> resultados = alumnoModel.buscarAlumno(criterio);

        request.setAttribute("resultados", resultados);
        request.getRequestDispatcher("buscar_alumno.jsp").forward(request, response);
    }
	

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
