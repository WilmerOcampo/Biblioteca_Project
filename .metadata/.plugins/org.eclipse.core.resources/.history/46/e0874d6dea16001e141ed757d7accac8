package servlets;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.*;
import models.CompraLibroModel;
import entities.CompraLibro;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class CompraLibroServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        action = (action == null) ? "listar" : action;

        switch (action) {
            case "listar" -> listarCompras(request, response);
            case "agregar" -> procesarCompra(request, response, "agregar");
            case "mostrar" -> procesarCompra(request, response, "mostrar");
            case "actualizar" -> procesarCompra(request, response, "actualizar");
            case "eliminar" -> procesarCompra(request, response, "eliminar");
            default -> listarCompras(request, response);
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }

    private void listarCompras(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            List<CompraLibro> compras = CompraLibroModel.obtenerDetallesCompra();
            request.setAttribute("compras", compras);
            request.getRequestDispatcher("listaCompras.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void procesarCompra(HttpServletRequest request, HttpServletResponse response, String action) throws ServletException, IOException {
        String idCompra = request.getParameter("id");
        String idLibro = request.getParameter("libro");
        String idEditorial = request.getParameter("editorial");
        String idEmpleado = request.getParameter("empleado");
        String fecCom = request.getParameter("fecha");
        String precioParam = request.getParameter("precio");
        BigDecimal precio = BigDecimal.ZERO; // Valor predeterminado en caso de que el parámetro sea nulo

        if (precioParam != null && !precioParam.isEmpty()) {
            try {
                precio = new BigDecimal(precioParam);
            } catch (NumberFormatException e) {
                // Manejar el caso en el que la cadena no sea un número válido
                e.printStackTrace();
            }
        }

        String can = request.getParameter("stock");
        int cantidad = 0; // Valor predeterminado en caso de que el parámetro sea nulo

        if (can != null && !can.isEmpty()) {
            try {
                cantidad = Integer.parseInt(can);
            } catch (NumberFormatException e) {
                // Manejar el caso en el que la cadena no sea un número válido
                e.printStackTrace();
            }
        }

        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date fecCompra = null;

            if (fecCom != null && !fecCom.isEmpty()) {
                fecCompra = dateFormat.parse(fecCom);
            }

            CompraLibro compra = new CompraLibro(idCompra, idLibro, idEditorial, idEmpleado, fecCompra, precio, cantidad);

            switch (action) {
                case "agregar":
                    CompraLibroModel.agregarCompraLibro(compra);
                    break;
                case "mostrar":
                    CompraLibro compraMostrada = CompraLibroModel.mostrarCompraLibro(idCompra);
                    request.setAttribute("compra", compraMostrada);
                    request.getRequestDispatcher("editarCompras.jsp").forward(request, response);
                    return; // Se agrega un return para salir del método después de redirigir
                case "actualizar":
                    CompraLibroModel.actualizarCompraLibro(compra);
                    break;
                case "eliminar":
                    CompraLibroModel.eliminarCompraLibro(idCompra);
                    break;
            }
            listarCompras(request, response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}